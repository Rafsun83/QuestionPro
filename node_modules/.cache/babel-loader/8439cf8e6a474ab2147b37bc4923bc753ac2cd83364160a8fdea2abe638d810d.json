{"ast":null,"code":"export const updateExistingProduct = (storeName, id, updatedData, version = 1) => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(\"myDB\", version);\n    request.onsuccess = () => {\n      const db = request.result;\n      const transaction = db.transaction(storeName, \"readwrite\");\n      const store = transaction.objectStore(storeName);\n      const getRequest = store.get(id);\n      getRequest.onsuccess = () => {\n        if (getRequest.result) {\n          const dataToUpdate = {\n            ...getRequest.result,\n            ...updatedData\n          };\n          const updateRequest = store.put(dataToUpdate);\n          updateRequest.onsuccess = () => {\n            resolve(dataToUpdate);\n          };\n        } else {\n          reject(`Record with ID ${id} not found.`);\n        }\n      };\n      getRequest.onerror = error => {\n        reject(`Error retrieving data: ${error}`);\n      };\n    };\n    request.onerror = error => {\n      reject(`Error opening database: ${error}`);\n    };\n  });\n};","map":{"version":3,"names":["updateExistingProduct","storeName","id","updatedData","version","Promise","resolve","reject","request","indexedDB","open","onsuccess","db","result","transaction","store","objectStore","getRequest","get","dataToUpdate","updateRequest","put","onerror","error"],"sources":["/home/jouleslabs/Downloads/Interview-task/Interview-Task/src/DB/Actions/updateProducts.ts"],"sourcesContent":["import { Product } from \"../db\";\n\nexport const updateExistingProduct = (\n  storeName: string,\n  id: string,\n  updatedData: Product,\n  version = 1\n) => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(\"myDB\", version); \n    request.onsuccess = () => {\n      const db = request.result;\n      const transaction = db.transaction(storeName, \"readwrite\");\n      const store = transaction.objectStore(storeName);\n\n      const getRequest = store.get(id);\n\n      getRequest.onsuccess = () => {\n        if (getRequest.result) {\n          const dataToUpdate = { ...getRequest.result, ...updatedData }; \n          const updateRequest = store.put(dataToUpdate);\n\n          updateRequest.onsuccess = () => {\n            resolve(dataToUpdate); \n          };\n        } else {\n          reject(`Record with ID ${id} not found.`);\n        }\n      }\n      getRequest.onerror = (error) => {\n        reject(`Error retrieving data: ${error}`);\n      };\n    };\n\n    request.onerror = (error) => {\n      reject(`Error opening database: ${error}`);\n    };\n  });\n};\n"],"mappings":"AAEA,OAAO,MAAMA,qBAAqB,GAAGA,CACnCC,SAAiB,EACjBC,EAAU,EACVC,WAAoB,EACpBC,OAAO,GAAG,CAAC,KACR;EACH,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGC,SAAS,CAACC,IAAI,CAAC,MAAM,EAAEN,OAAO,CAAC;IAC/CI,OAAO,CAACG,SAAS,GAAG,MAAM;MACxB,MAAMC,EAAE,GAAGJ,OAAO,CAACK,MAAM;MACzB,MAAMC,WAAW,GAAGF,EAAE,CAACE,WAAW,CAACb,SAAS,EAAE,WAAW,CAAC;MAC1D,MAAMc,KAAK,GAAGD,WAAW,CAACE,WAAW,CAACf,SAAS,CAAC;MAEhD,MAAMgB,UAAU,GAAGF,KAAK,CAACG,GAAG,CAAChB,EAAE,CAAC;MAEhCe,UAAU,CAACN,SAAS,GAAG,MAAM;QAC3B,IAAIM,UAAU,CAACJ,MAAM,EAAE;UACrB,MAAMM,YAAY,GAAG;YAAE,GAAGF,UAAU,CAACJ,MAAM;YAAE,GAAGV;UAAY,CAAC;UAC7D,MAAMiB,aAAa,GAAGL,KAAK,CAACM,GAAG,CAACF,YAAY,CAAC;UAE7CC,aAAa,CAACT,SAAS,GAAG,MAAM;YAC9BL,OAAO,CAACa,YAAY,CAAC;UACvB,CAAC;QACH,CAAC,MAAM;UACLZ,MAAM,CAAC,kBAAkBL,EAAE,aAAa,CAAC;QAC3C;MACF,CAAC;MACDe,UAAU,CAACK,OAAO,GAAIC,KAAK,IAAK;QAC9BhB,MAAM,CAAC,0BAA0BgB,KAAK,EAAE,CAAC;MAC3C,CAAC;IACH,CAAC;IAEDf,OAAO,CAACc,OAAO,GAAIC,KAAK,IAAK;MAC3BhB,MAAM,CAAC,2BAA2BgB,KAAK,EAAE,CAAC;IAC5C,CAAC;EACH,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}