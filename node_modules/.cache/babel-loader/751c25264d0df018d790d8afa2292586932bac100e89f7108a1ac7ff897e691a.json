{"ast":null,"code":"export const updateExistingProduct = function (storeName, id, updatedData) {\n  let version = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('myDB', version); // Adjust with your actual DB version\n\n    request.onsuccess = () => {\n      const db = request.result;\n      const transaction = db.transaction(storeName, 'readwrite');\n      const store = transaction.objectStore(storeName);\n\n      // Retrieve data by ID to confirm it exists before updating\n      const getRequest = store.get(id);\n      getRequest.onsuccess = () => {\n        if (getRequest.result) {\n          // Record exists, update it\n          const dataToUpdate = {\n            ...getRequest.result,\n            ...updatedData\n          }; // Merge existing and new data\n\n          const updateRequest = store.put(dataToUpdate);\n          updateRequest.onsuccess = () => {\n            resolve(dataToUpdate); // Successfully updated\n          };\n\n          updateRequest.onerror = error => {\n            reject(`Failed to update data: ${error}`);\n          };\n        } else {\n          // Record does not exist\n          reject(`Record with ID ${id} not found.`);\n        }\n      };\n      getRequest.onerror = error => {\n        reject(`Error retrieving data: ${error}`);\n      };\n    };\n    request.onerror = error => {\n      reject(`Error opening database: ${error}`);\n    };\n  });\n};","map":{"version":3,"names":["updateExistingProduct","storeName","id","updatedData","version","Promise","resolve","reject","request","indexedDB","open","onsuccess","db","result","transaction","store","objectStore","getRequest","get","dataToUpdate","updateRequest","put","onerror","error"],"sources":["/home/jouleslabs/Downloads/Interview-task/react_ts_modal/src/DB/Actions/updateProducts.ts"],"sourcesContent":["import { Product } from \"../db\";\n\nexport const updateExistingProduct = (storeName: string, id: string, updatedData:Product , version = 1) => {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('myDB', version); // Adjust with your actual DB version\n  \n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(storeName, 'readwrite');\n        const store = transaction.objectStore(storeName);\n  \n        // Retrieve data by ID to confirm it exists before updating\n        const getRequest = store.get(id);\n  \n        getRequest.onsuccess = () => {\n          if (getRequest.result) {\n            // Record exists, update it\n            const dataToUpdate = { ...getRequest.result, ...updatedData }; // Merge existing and new data\n  \n            const updateRequest = store.put(dataToUpdate);\n  \n            updateRequest.onsuccess = () => {\n              resolve(dataToUpdate); // Successfully updated\n            };\n  \n            updateRequest.onerror = (error) => {\n              reject(`Failed to update data: ${error}`);\n            };\n          } else {\n            // Record does not exist\n            reject(`Record with ID ${id} not found.`);\n          }\n        };\n  \n        getRequest.onerror = (error) => {\n          reject(`Error retrieving data: ${error}`);\n        };\n      };\n  \n      request.onerror = (error) => {\n        reject(`Error opening database: ${error}`);\n      };\n    });\n  };"],"mappings":"AAEA,OAAO,MAAMA,qBAAqB,GAAG,UAACC,SAAiB,EAAEC,EAAU,EAAEC,WAAmB,EAAmB;EAAA,IAAhBC,OAAO,uEAAG,CAAC;EAClG,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGC,SAAS,CAACC,IAAI,CAAC,MAAM,EAAEN,OAAO,CAAC,CAAC,CAAC;;IAEjDI,OAAO,CAACG,SAAS,GAAG,MAAM;MACxB,MAAMC,EAAE,GAAGJ,OAAO,CAACK,MAAM;MACzB,MAAMC,WAAW,GAAGF,EAAE,CAACE,WAAW,CAACb,SAAS,EAAE,WAAW,CAAC;MAC1D,MAAMc,KAAK,GAAGD,WAAW,CAACE,WAAW,CAACf,SAAS,CAAC;;MAEhD;MACA,MAAMgB,UAAU,GAAGF,KAAK,CAACG,GAAG,CAAChB,EAAE,CAAC;MAEhCe,UAAU,CAACN,SAAS,GAAG,MAAM;QAC3B,IAAIM,UAAU,CAACJ,MAAM,EAAE;UACrB;UACA,MAAMM,YAAY,GAAG;YAAE,GAAGF,UAAU,CAACJ,MAAM;YAAE,GAAGV;UAAY,CAAC,CAAC,CAAC;;UAE/D,MAAMiB,aAAa,GAAGL,KAAK,CAACM,GAAG,CAACF,YAAY,CAAC;UAE7CC,aAAa,CAACT,SAAS,GAAG,MAAM;YAC9BL,OAAO,CAACa,YAAY,CAAC,CAAC,CAAC;UACzB,CAAC;;UAEDC,aAAa,CAACE,OAAO,GAAIC,KAAK,IAAK;YACjChB,MAAM,CAAE,0BAAyBgB,KAAM,EAAC,CAAC;UAC3C,CAAC;QACH,CAAC,MAAM;UACL;UACAhB,MAAM,CAAE,kBAAiBL,EAAG,aAAY,CAAC;QAC3C;MACF,CAAC;MAEDe,UAAU,CAACK,OAAO,GAAIC,KAAK,IAAK;QAC9BhB,MAAM,CAAE,0BAAyBgB,KAAM,EAAC,CAAC;MAC3C,CAAC;IACH,CAAC;IAEDf,OAAO,CAACc,OAAO,GAAIC,KAAK,IAAK;MAC3BhB,MAAM,CAAE,2BAA0BgB,KAAM,EAAC,CAAC;IAC5C,CAAC;EACH,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}