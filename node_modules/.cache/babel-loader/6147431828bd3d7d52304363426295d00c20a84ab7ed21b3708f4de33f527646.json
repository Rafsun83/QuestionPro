{"ast":null,"code":"export const updateExistingProduct=function(storeName,id,updatedData){let version=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;return new Promise((resolve,reject)=>{const request=indexedDB.open(\"myDB\",version);request.onsuccess=()=>{const db=request.result;const transaction=db.transaction(storeName,\"readwrite\");const store=transaction.objectStore(storeName);const getRequest=store.get(id);getRequest.onsuccess=()=>{if(getRequest.result){const dataToUpdate={...getRequest.result,...updatedData};const updateRequest=store.put(dataToUpdate);updateRequest.onsuccess=()=>{resolve(dataToUpdate);};}else{reject(`Record with ID ${id} not found.`);}};getRequest.onerror=error=>{reject(`Error retrieving data: ${error}`);};};request.onerror=error=>{reject(`Error opening database: ${error}`);};});};","map":{"version":3,"names":["updateExistingProduct","storeName","id","updatedData","version","arguments","length","undefined","Promise","resolve","reject","request","indexedDB","open","onsuccess","db","result","transaction","store","objectStore","getRequest","get","dataToUpdate","updateRequest","put","onerror","error"],"sources":["/home/jouleslabs/Downloads/Interview-task/react_ts_modal/src/DB/Actions/updateProducts.ts"],"sourcesContent":["import { Product } from \"../db\";\n\nexport const updateExistingProduct = (\n  storeName: string,\n  id: string,\n  updatedData: Product,\n  version = 1\n) => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(\"myDB\", version); \n    request.onsuccess = () => {\n      const db = request.result;\n      const transaction = db.transaction(storeName, \"readwrite\");\n      const store = transaction.objectStore(storeName);\n\n      const getRequest = store.get(id);\n\n      getRequest.onsuccess = () => {\n        if (getRequest.result) {\n          const dataToUpdate = { ...getRequest.result, ...updatedData }; \n          const updateRequest = store.put(dataToUpdate);\n\n          updateRequest.onsuccess = () => {\n            resolve(dataToUpdate); \n          };\n        } else {\n          reject(`Record with ID ${id} not found.`);\n        }\n      }\n      getRequest.onerror = (error) => {\n        reject(`Error retrieving data: ${error}`);\n      };\n    };\n\n    request.onerror = (error) => {\n      reject(`Error opening database: ${error}`);\n    };\n  });\n};\n"],"mappings":"AAEA,MAAO,MAAM,CAAAA,qBAAqB,CAAG,QAAAA,CACnCC,SAAiB,CACjBC,EAAU,CACVC,WAAoB,CAEjB,IADH,CAAAC,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAEX,MAAO,IAAI,CAAAG,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,KAAM,CAAAC,OAAO,CAAGC,SAAS,CAACC,IAAI,CAAC,MAAM,CAAET,OAAO,CAAC,CAC/CO,OAAO,CAACG,SAAS,CAAG,IAAM,CACxB,KAAM,CAAAC,EAAE,CAAGJ,OAAO,CAACK,MAAM,CACzB,KAAM,CAAAC,WAAW,CAAGF,EAAE,CAACE,WAAW,CAAChB,SAAS,CAAE,WAAW,CAAC,CAC1D,KAAM,CAAAiB,KAAK,CAAGD,WAAW,CAACE,WAAW,CAAClB,SAAS,CAAC,CAEhD,KAAM,CAAAmB,UAAU,CAAGF,KAAK,CAACG,GAAG,CAACnB,EAAE,CAAC,CAEhCkB,UAAU,CAACN,SAAS,CAAG,IAAM,CAC3B,GAAIM,UAAU,CAACJ,MAAM,CAAE,CACrB,KAAM,CAAAM,YAAY,CAAG,CAAE,GAAGF,UAAU,CAACJ,MAAM,CAAE,GAAGb,WAAY,CAAC,CAC7D,KAAM,CAAAoB,aAAa,CAAGL,KAAK,CAACM,GAAG,CAACF,YAAY,CAAC,CAE7CC,aAAa,CAACT,SAAS,CAAG,IAAM,CAC9BL,OAAO,CAACa,YAAY,CAAC,CACvB,CAAC,CACH,CAAC,IAAM,CACLZ,MAAM,CAAC,kBAAkBR,EAAE,aAAa,CAAC,CAC3C,CACF,CAAC,CACDkB,UAAU,CAACK,OAAO,CAAIC,KAAK,EAAK,CAC9BhB,MAAM,CAAC,0BAA0BgB,KAAK,EAAE,CAAC,CAC3C,CAAC,CACH,CAAC,CAEDf,OAAO,CAACc,OAAO,CAAIC,KAAK,EAAK,CAC3BhB,MAAM,CAAC,2BAA2BgB,KAAK,EAAE,CAAC,CAC5C,CAAC,CACH,CAAC,CAAC,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}