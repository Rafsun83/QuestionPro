{"ast":null,"code":"let request;\nlet db;\nlet version = 1;\nexport let Stores = /*#__PURE__*/function (Stores) {\n  Stores[\"Products\"] = \"products\";\n  return Stores;\n}({});\nexport const initDB = () => {\n  return new Promise(resolve => {\n    // open the connection\n    request = indexedDB.open('myDB');\n    request.onupgradeneeded = () => {\n      db = request.result;\n\n      // if the data object store doesn't exist, create it\n      if (!db.objectStoreNames.contains(Stores.Products)) {\n        console.log('Creating users store');\n        db.createObjectStore(Stores.Products, {\n          keyPath: 'id'\n        });\n      }\n      // no need to resolve here\n    };\n    request.onsuccess = () => {\n      db = request.result;\n      version = db.version;\n      console.log('request.onsuccess - initDB', version);\n      resolve(true);\n    };\n    request.onerror = () => {\n      resolve(false);\n    };\n  });\n};","map":{"version":3,"names":["request","db","version","Stores","initDB","Promise","resolve","indexedDB","open","onupgradeneeded","result","objectStoreNames","contains","Products","console","log","createObjectStore","keyPath","onsuccess","onerror"],"sources":["/home/jouleslabs/Downloads/Interview-task/react_ts_modal/src/DB/db.ts"],"sourcesContent":["let request: IDBOpenDBRequest;\nlet db: IDBDatabase;\nlet version = 1;\n\nexport interface Product {\n  id: string;\n  image: string;\n  name: string;\n  description: string;\n  price: string;\n}\n\nexport enum Stores {\n  Products = 'products',\n}\n\nexport const initDB = (): Promise<boolean> => {\n  return new Promise((resolve) => {\n    // open the connection\n    request = indexedDB.open('myDB');\n\n    request.onupgradeneeded = () => {\n      db = request.result;\n\n      // if the data object store doesn't exist, create it\n      if (!db.objectStoreNames.contains(Stores.Products)) {\n        console.log('Creating users store');\n        db.createObjectStore(Stores.Products, { keyPath: 'id' });\n      }\n      // no need to resolve here\n    };\n\n    request.onsuccess = () => {\n      db = request.result;\n      version = db.version;\n      console.log('request.onsuccess - initDB', version);\n      resolve(true);\n    };\n\n    request.onerror = () => {\n      resolve(false);\n    };\n  });\n};"],"mappings":"AAAA,IAAIA,OAAyB;AAC7B,IAAIC,EAAe;AACnB,IAAIC,OAAO,GAAG,CAAC;AAUf,WAAYC,MAAM,0BAANA,MAAM;EAANA,MAAM;EAAA,OAANA,MAAM;AAAA;AAIlB,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAwB;EAC5C,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B;IACAN,OAAO,GAAGO,SAAS,CAACC,IAAI,CAAC,MAAM,CAAC;IAEhCR,OAAO,CAACS,eAAe,GAAG,MAAM;MAC9BR,EAAE,GAAGD,OAAO,CAACU,MAAM;;MAEnB;MACA,IAAI,CAACT,EAAE,CAACU,gBAAgB,CAACC,QAAQ,CAACT,MAAM,CAACU,QAAQ,CAAC,EAAE;QAClDC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACnCd,EAAE,CAACe,iBAAiB,CAACb,MAAM,CAACU,QAAQ,EAAE;UAAEI,OAAO,EAAE;QAAK,CAAC,CAAC;MAC1D;MACA;IACF,CAAC;IAEDjB,OAAO,CAACkB,SAAS,GAAG,MAAM;MACxBjB,EAAE,GAAGD,OAAO,CAACU,MAAM;MACnBR,OAAO,GAAGD,EAAE,CAACC,OAAO;MACpBY,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEb,OAAO,CAAC;MAClDI,OAAO,CAAC,IAAI,CAAC;IACf,CAAC;IAEDN,OAAO,CAACmB,OAAO,GAAG,MAAM;MACtBb,OAAO,CAAC,KAAK,CAAC;IAChB,CAAC;EACH,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}