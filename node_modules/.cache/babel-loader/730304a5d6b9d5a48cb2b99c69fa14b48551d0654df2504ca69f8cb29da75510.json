{"ast":null,"code":"var _jsxFileName = \"/home/jouleslabs/Desktop/QuestionPro/Interview-Task/src/CommonComponent/Button/Button.tsx\";\nimport clsx from 'clsx';\nimport React from 'react';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomButtons = ({\n  onClick,\n  className,\n  variant = \"green\",\n  type,\n  disabled,\n  isLoading,\n  children,\n  ...props\n}) => {\n  const classNames = clsx('buttonclass', className, `btn  btn-${variant}`);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: type,\n    className: classNames,\n    disabled: disabled,\n    ...props,\n    children: isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    //   <LoadingIcon className=\"animate-spin\" style={{ fill: 'inherit' }} />\n    : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_c = CustomButtons;\nexport default CustomButtons;\nvar _c;\n$RefreshReg$(_c, \"CustomButtons\");","map":{"version":3,"names":["clsx","React","Fragment","_Fragment","jsxDEV","_jsxDEV","CustomButtons","onClick","className","variant","type","disabled","isLoading","children","props","classNames","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jouleslabs/Desktop/QuestionPro/Interview-Task/src/CommonComponent/Button/Button.tsx"],"sourcesContent":["import clsx from 'clsx';\nimport React, { MouseEvent, PropsWithChildren, ReactElement } from 'react';\ninterface ButtonProps {\n    style?: object;\n    size?: string;\n    variant?: string;\n    className?: string;\n    LeadingIcon?: ReactElement;\n    TrailingIcon?: ReactElement;\n    IconOnly?: ReactElement;\n    isLoading?: boolean;\n    disabled?: boolean;\n    type?: 'reset' | 'button' | 'submit';\n    onClick?: (event: MouseEvent<HTMLButtonElement>) => void;\n\n  }\n\n\nconst CustomButtons = ({ onClick, className, variant=\"green\", type, disabled, isLoading,children, ...props }: PropsWithChildren<ButtonProps>) => {\n    const classNames = clsx('buttonclass', className, `btn  btn-${variant}`)\n    return (\n        <button type={type} className={classNames} disabled={disabled} {...props}>\n            {isLoading ? (\n        <></>\n        //   <LoadingIcon className=\"animate-spin\" style={{ fill: 'inherit' }} />\n        ) : (\n          children\n        )}\n      </button>\n    );\n};\n\nexport default CustomButtons;"],"mappings":";AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,MAAuD,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAiB3E,MAAMC,aAAa,GAAGA,CAAC;EAAEC,OAAO;EAAEC,SAAS;EAAEC,OAAO,GAAC,OAAO;EAAEC,IAAI;EAAEC,QAAQ;EAAEC,SAAS;EAACC,QAAQ;EAAE,GAAGC;AAAsC,CAAC,KAAK;EAC7I,MAAMC,UAAU,GAAGf,IAAI,CAAC,aAAa,EAAEQ,SAAS,EAAE,YAAYC,OAAO,EAAE,CAAC;EACxE,oBACIJ,OAAA;IAAQK,IAAI,EAAEA,IAAK;IAACF,SAAS,EAAEO,UAAW;IAACJ,QAAQ,EAAEA,QAAS;IAAA,GAAKG,KAAK;IAAAD,QAAA,EACnED,SAAS,gBACdP,OAAA,CAAAF,SAAA,mBAAI;IACJ;IAAA,EAEEU;EACD;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEf,CAAC;AAACC,EAAA,GAZId,aAAa;AAcnB,eAAeA,aAAa;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}