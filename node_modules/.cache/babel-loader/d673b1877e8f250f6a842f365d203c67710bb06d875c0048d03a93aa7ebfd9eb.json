{"ast":null,"code":"var _jsxFileName = \"/home/jouleslabs/Desktop/QuestionPro/Interview-Task/src/component/Post/UserPost.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Post from '../../Feature/Post/Post';\nimport { useQuery } from '@tanstack/react-query';\n// import config from '../../config/confix'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchPosts = async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n  if (!response.ok) {\n    throw new Error('Network response was not ok');\n  }\n  return response.json();\n};\nconst fetchUsers = async () => {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  if (!response.ok) {\n    throw new Error(\"Network response was not ok\");\n  }\n  return response.json();\n};\nexport default function UserPost() {\n  _s();\n  const [selectedOption, setSelectedOption] = useState(null);\n  const {\n    data\n  } = useQuery({\n    queryKey: ['posta'],\n    queryFn: fetchPosts\n  });\n  const {\n    data: users\n  } = useQuery({\n    queryKey: ['posta'],\n    queryFn: fetchUsers\n  });\n  const options = users === null || users === void 0 ? void 0 : users.map((item, index) => {\n    return {\n      label: item.name,\n      value: item.id\n    };\n  });\n  const handleSelect = option => {\n    setSelectedOption(option);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-[50%]\",\n    children: /*#__PURE__*/_jsxDEV(Post, {\n      data: data,\n      selectedOption: selectedOption,\n      options: options,\n      handleSelect: handleSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(UserPost, \"dz4yeCJhOZr9fgrcWGHI8z1qMQw=\", false, function () {\n  return [useQuery, useQuery];\n});\n_c = UserPost;\nvar _c;\n$RefreshReg$(_c, \"UserPost\");","map":{"version":3,"names":["React","useState","Post","useQuery","jsxDEV","_jsxDEV","fetchPosts","response","fetch","ok","Error","json","fetchUsers","UserPost","_s","selectedOption","setSelectedOption","data","queryKey","queryFn","users","options","map","item","index","label","name","value","id","handleSelect","option","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jouleslabs/Desktop/QuestionPro/Interview-Task/src/component/Post/UserPost.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport Post from '../../Feature/Post/Post'\nimport { useQuery } from '@tanstack/react-query';\n// import config from '../../config/confix'\n\nconst fetchPosts = async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n  if (!response.ok) {\n    throw new Error('Network response was not ok');\n  }\n  return response.json();\n};\n\nconst fetchUsers = async () => {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  if (!response.ok) {\n    throw new Error(\"Network response was not ok\");\n  }\n  return response.json();\n};\n\nexport default function UserPost() {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const {data} = useQuery({ queryKey: ['posta'], queryFn: fetchPosts })\n  const {data:users} = useQuery({ queryKey: ['posta'], queryFn: fetchUsers })\n\n\n\n  const options = users?.map((item:any, index:number) => {\n    return {\n      label: item.name,\n      value: item.id\n    }\n  })\n\n  const handleSelect = (option: any) => {\n    setSelectedOption(option);\n  };\n\n\n  return (\n    <div className='w-[50%]'>\n      <Post data={data} selectedOption={selectedOption} options={options} handleSelect={handleSelect} />\n    </div>\n  )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,yBAAyB;AAC1C,SAASC,QAAQ,QAAQ,uBAAuB;AAChD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;EAC1E,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC;EAC1E,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,eAAe,SAASE,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM;IAACgB;EAAI,CAAC,GAAGd,QAAQ,CAAC;IAAEe,QAAQ,EAAE,CAAC,OAAO,CAAC;IAAEC,OAAO,EAAEb;EAAW,CAAC,CAAC;EACrE,MAAM;IAACW,IAAI,EAACG;EAAK,CAAC,GAAGjB,QAAQ,CAAC;IAAEe,QAAQ,EAAE,CAAC,OAAO,CAAC;IAAEC,OAAO,EAAEP;EAAW,CAAC,CAAC;EAI3E,MAAMS,OAAO,GAAGD,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE,GAAG,CAAC,CAACC,IAAQ,EAAEC,KAAY,KAAK;IACrD,OAAO;MACLC,KAAK,EAAEF,IAAI,CAACG,IAAI;MAChBC,KAAK,EAAEJ,IAAI,CAACK;IACd,CAAC;EACH,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAIC,MAAW,IAAK;IACpCd,iBAAiB,CAACc,MAAM,CAAC;EAC3B,CAAC;EAGD,oBACEzB,OAAA;IAAK0B,SAAS,EAAC,SAAS;IAAAC,QAAA,eACtB3B,OAAA,CAACH,IAAI;MAACe,IAAI,EAAEA,IAAK;MAACF,cAAc,EAAEA,cAAe;MAACM,OAAO,EAAEA,OAAQ;MAACQ,YAAY,EAAEA;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/F,CAAC;AAEV;AAACtB,EAAA,CAxBuBD,QAAQ;EAAA,QAEfV,QAAQ,EACFA,QAAQ;AAAA;AAAAkC,EAAA,GAHPxB,QAAQ;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}