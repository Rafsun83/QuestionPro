{"ast":null,"code":"var _jsxFileName = \"/home/rafsun/Desktop/Practice Project/React Custom modal/react_ts_modal/src/component/Button/CustomButtons.tsx\";\nimport clsx from 'clsx';\nimport React from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomButtons = _ref => {\n  let {\n    onClick,\n    className,\n    variant,\n    type,\n    disabled,\n    isLoading,\n    children,\n    ...props\n  } = _ref;\n  const classNames = clsx('buttonclass', className, `btn  btn-${variant}`);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: type,\n    className: classNames,\n    disabled: disabled,\n    ...props,\n    children: isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    //   <LoadingIcon className=\"animate-spin\" style={{ fill: 'inherit' }} />\n    : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_c = CustomButtons;\nexport default CustomButtons;\nvar _c;\n$RefreshReg$(_c, \"CustomButtons\");","map":{"version":3,"names":["clsx","React","CustomButtons","onClick","className","variant","type","disabled","isLoading","children","props","classNames"],"sources":["/home/rafsun/Desktop/Practice Project/React Custom modal/react_ts_modal/src/component/Button/CustomButtons.tsx"],"sourcesContent":["import clsx from 'clsx';\r\nimport React, { MouseEvent, PropsWithChildren, ReactElement } from 'react';\r\ninterface ButtonProps {\r\n    style?: object;\r\n    size?: string;\r\n    variant?: string;\r\n    className?: string;\r\n    LeadingIcon?: ReactElement;\r\n    TrailingIcon?: ReactElement;\r\n    IconOnly?: ReactElement;\r\n    isLoading?: boolean;\r\n    disabled?: boolean;\r\n    type?: 'reset' | 'button' | 'submit';\r\n    onClick?: (event: MouseEvent<HTMLButtonElement>) => void;\r\n\r\n  }\r\n\r\n\r\nconst CustomButtons = ({ onClick, className, variant, type, disabled, isLoading,children, ...props }: PropsWithChildren<ButtonProps>) => {\r\n    const classNames = clsx('buttonclass', className, `btn  btn-${variant}`)\r\n    return (\r\n        <button type={type} className={classNames} disabled={disabled} {...props}>\r\n            {isLoading ? (\r\n        <></>\r\n        //   <LoadingIcon className=\"animate-spin\" style={{ fill: 'inherit' }} />\r\n        ) : (\r\n          children\r\n        )}\r\n      </button>\r\n    );\r\n};\r\n\r\nexport default CustomButtons;"],"mappings":";AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,KAAK,MAAuD,OAAO;AAAC;AAAA;AAiB3E,MAAMC,aAAa,GAAG,QAAmH;EAAA,IAAlH;IAAEC,OAAO;IAAEC,SAAS;IAAEC,OAAO;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,SAAS;IAACC,QAAQ;IAAE,GAAGC;EAAsC,CAAC;EAChI,MAAMC,UAAU,GAAGX,IAAI,CAAC,aAAa,EAAEI,SAAS,EAAG,YAAWC,OAAQ,EAAC,CAAC;EACxE,oBACI;IAAQ,IAAI,EAAEC,IAAK;IAAC,SAAS,EAAEK,UAAW;IAAC,QAAQ,EAAEJ,QAAS;IAAA,GAAKG,KAAK;IAAA,UACnEF,SAAS,gBACd;IACA;IAAA,EAEEC;EACD;IAAA;IAAA;IAAA;EAAA,QACM;AAEf,CAAC;AAAC,KAZIP,aAAa;AAcnB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}